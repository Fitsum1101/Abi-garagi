
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



model CustomerIdentifier { 
  customerId Int @id @default(autoincrement())
  customerEmail String @unique
  customerPhoneNumber String
  customerAddedDate DateTime @default(now())
  customerHash  String? @unique
  customerInfo CustomerInfo?
  customerVehicles CustomerVehicleInfo[]
  orders Order[]
}

model CustomerInfo {
  customerInfoId Int @id @default(autoincrement())
  customerFirstName String
  customerLastName String
  activeCustomerStatus Int
  customer CustomerIdentifier @relation(fields: [customerId], references: [customerId])
  customerId  Int @unique
}

model CustomerVehicleInfo {
  vehicleId Int @id @default(autoincrement())
  customerId Int 
  vehicleYear Int
  vehicleMake String
  vehicleModel String
  vehicleType String
  vehicleMileage Int
  vehicleTag String
  vehicleSerial String
  vehicleColor String
  customer CustomerIdentifier @relation(fields: [customerId], references: [customerId])
  order Order[] 
}



model CommonServices {
  serviceId      Int                  @id @default(autoincrement())
  serviceName    String
  serviceDescription String?  
  activeService  Int @default(1)  
  orderService OrderService[]     
}

model Employee {
  employeeId     Int                  @id @default(autoincrement())
  employeeEmail  String               @unique
  activeEmployee Int 
  addedDate      DateTime             @default(now())
  role           Role                 @default(EMPLOYEE)
  employeeInfo   EmployeeInfo?
  employeePass   EmployeePass?
  orders        Order[]
}

model EmployeeInfo {
  employeeInfoId Int @id @default(autoincrement())
  employeeId    Int @unique
  employeeFirstName String
  employeeLastName  String
  employeePhone String
  employee      Employee @relation(fields: [employeeId], references: [employeeId])
}

model EmployeePass {
  employeePassId      Int @id @default(autoincrement())
  employeeId         Int @unique
  employeePasswordHashed String
  employee           Employee @relation(fields: [employeeId], references: [employeeId])
}


model Order {
  orderId       Int                  @id @default(autoincrement())
  employeeId    Int
  customerId    Int
  vehicleId     Int
  price         Int           
  activeOrder   Int
  orderHash     String?
  orderDate     DateTime             @default(now())
  employee      Employee             @relation(fields: [employeeId], references: [employeeId])
  customer      CustomerIdentifier   @relation(fields: [customerId], references: [customerId])
  vehicle      CustomerVehicleInfo  @relation(fields: [vehicleId], references: [vehicleId])
  orderServices OrderService[]
  additionalOrder  AdditionalOrder[]
}

model AdditionalOrder{
  additionalOrder  Int @id @default(autoincrement())
  orderId       Int
  description String
  serviceCompleted OrderStatus @default(Inprogress) 
  order        Order        @relation(fields: [orderId], references: [orderId])
}

model OrderService {
  orderServiceId Int @id @default(autoincrement())
  orderId       Int
  serviceId     Int
  serviceCompleted OrderStatus @default(Inprogress) 
  order        Order        @relation(fields: [orderId], references: [orderId])
  service     CommonServices @relation(fields: [serviceId], references: [serviceId])
}

enum Role {
  ADMIN
  EMPLOYEE
  MANAGER
}

enum OrderStatus{
    Inprogress
    completed
    recieved
}